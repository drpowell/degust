<%= render "degust/libraries.R.erb" %>

counts_file <- '<%== @counts_file %>'
output_dir <- "<%== @output_dir %>"
count_cols <- <%== @columns %>
design <- <%== @design %>
cont.matrix <- <%== @cont_matrix %>
export_cols <- c(<%== @export_cols %>)

# Maybe filter out samples that are not used in the model
if (<%== @model_only_selected %>) {
    # Remove columns not used in the comparison
    use.samples <- rowSums((design %*% cont.matrix)!=0)>0
    use.conditions <- colSums(design[use.samples,]!=0)>0

    count_cols <- count_cols[use.samples,drop=F]
    design <- design[use.samples, use.conditions,drop=F]
    cont.matrix <- cont.matrix[use.conditions,,drop=F]
}

# fileEncoding='UTF-8-BOM' should strip the BOM marker FEFF that some windows tools add
x<-read.delim(counts_file,
              sep="<%== @sep_char %>",
              check.names=FALSE,
              colClasses='character',
              na.strings=c(),
              skip=<%= @skip_header_lines %>,
              fileEncoding='UTF-8-BOM'
              )

# Now re-read the first header line.  Workaround R problem that always has strip.white=T for read.table
colnames(x) <- scan(counts_file,
                    what="",
                    sep="<%== @sep_char %>",
                    nlines=1,
                    strip.white=F,
                    quote = "\"",
                    skip="<%= @skip_header_lines %>",
                    fileEncoding='UTF-8-BOM'
                    )

# Check which rows have dodgy values in the counts columns
non_numeric_rows <- apply(x[, count_cols], 1, function(row) {
    any(is.na(suppressWarnings(as.numeric(row))))
  })

if (any(non_numeric_rows)) {
    warning("Bad CSV, non-numeric counts in these rows : ", toString(paste(which(non_numeric_rows))))
}

x[,count_cols] <- apply(x[,count_cols], 2, function(v) as.numeric(v))     # Force numeric count columns
counts <- x[, count_cols]

# Keep rows based on string based filters of columns.  Rows must match all filters
filter_rows <- fromJSON('<%== @filter_rows %>')
if (length(filter_rows)>0) {
    keepRows <- apply(apply(filter_rows, 1, function(r) grepl(r['regexp'], x[,r['column']], perl=T, ignore.case=T)), 1, all)
} else {
    keepRows <- rep(TRUE, nrow(x))
}

keepMin <- apply(counts, 1, max) >= <%= @min_counts %>
keepCpm <- rowSums(cpm(counts)> <%= @min_cpm %>) >= <%= @min_cpm_samples %>                  # Keep only genes with cpm above x in at least y samples

keep <- keepMin & keepCpm & keepRows
x <- x[keep,]
counts <- counts[keep,]

